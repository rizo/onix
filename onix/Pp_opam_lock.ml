open Utils

type classification = {
  build : Name_set.t;
  test : Name_set.t;
  doc : Name_set.t;
  dev_setup : Name_set.t;
}

let metadata =
  [
    ("opam-version", "2.0");
    ("synopsis", "This lock file was generated by onix " ^ Lib.version);
    ("maintainer", "The onix programmers");
    ("author", "The onix programmers");
    ("homepage", "https://github.com/odis-labs/onix");
    ("bug-reports", "https://github.com/odis-labs/onix/issues");
  ]

let pp_metadata f fields =
  Fmt.pf f "%a" (Fmt.list (fun f (k, v) -> Fmt.pf f "%s: %S" k v)) fields

let pp_depend_flags f flags =
  if not (List.is_empty flags) then
    Fmt.pf f " & %a" Fmt.(list ~sep:(any " | ") string) flags

let compute_depend_flags ~classification:c (pkg : Lock_pkg.t) =
  let name = OpamPackage.name pkg.opam_details.package in
  let flags = ref [] in
  if Name_set.mem name c.build then flags := "build" :: !flags;
  if Name_set.mem name c.test then flags := "with-test" :: !flags;
  if Name_set.mem name c.doc then flags := "with-doc" :: !flags;
  if Name_set.mem name c.dev_setup then flags := "with-dev-setup" :: !flags;
  !flags

let pp_depend ~classification f (pkg : Lock_pkg.t) =
  Fmt.pf f "%S {= %S%a}"
    (OpamPackage.name_to_string pkg.opam_details.package)
    (OpamPackage.version_to_string pkg.opam_details.package)
    pp_depend_flags
    (compute_depend_flags ~classification pkg)

let pp_depends ~classification f depends =
  Fmt.pf f "@[<v2>depends: [@,%a@]@,]"
    (Fmt.list (pp_depend ~classification))
    depends

let pp_pin_depend_src f (pkg : Lock_pkg.t) =
  match pkg.src with
  | Some (Git { url; rev }) -> Fmt.pf f "\"git+%s#%s\"" url rev
  | Some _ ->
    Fmt.invalid_arg
      "Lock dependency error for pinned package %a: url must be a Git URL"
      Opam_utils.pp_package pkg.opam_details.package
  | None ->
    Fmt.invalid_arg
      "Lock dependency error for pinned package %a: missing Git URL"
      Opam_utils.pp_package pkg.opam_details.package

let pp_pin_depend f (pkg : Lock_pkg.t) =
  Fmt.pf f "@[<v2>[@,%S@,%a@]@,]"
    (OpamPackage.to_string pkg.opam_details.package)
    pp_pin_depend_src pkg

let pp_pin_depends f pin_depends =
  Fmt.pf f "@[<v2>pin-depends: [@,%a@]@,]" (Fmt.list pp_pin_depend) pin_depends

let classify_root_pkgs roots =
  let empty =
    {
      build = Name_set.empty;
      test = Name_set.empty;
      doc = Name_set.empty;
      dev_setup = Name_set.empty;
    }
  in
  List.fold_left
    (fun sets (pkg : Lock_pkg.t) ->
      {
        build = Name_set.union sets.build pkg.depends_build;
        test = Name_set.union sets.test pkg.depends_test;
        doc = Name_set.union sets.doc pkg.depends_doc;
        dev_setup = Name_set.union sets.dev_setup pkg.depends_dev_setup;
      })
    empty roots

let pp fmt (lock : Lock_file.t) =
  let roots, pin_depends, depends =
    List.fold_left
      (fun (roots, pins, deps) (pkg : Lock_pkg.t) ->
        if Opam_utils.is_pinned pkg.opam_details.package then
          (roots, pkg :: pins, pkg :: deps)
        else if Opam_utils.is_root pkg.opam_details.package then
          (pkg :: roots, pins, deps)
        else (roots, pins, pkg :: deps))
      ([], [], []) lock.packages
  in
  let classification = classify_root_pkgs roots in
  let pin_depends, depends = (List.rev pin_depends, List.rev depends) in
  Fmt.pf fmt
    "@[<v># THIS IS AN AUTOGENERATED FILE. DO NOT EDIT DIRECTLY.@,\
     %a@,\
     %a@,\
     %a@]@."
    pp_metadata metadata
    (pp_depends ~classification)
    depends pp_pin_depends pin_depends
